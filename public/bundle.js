!function(){const t=t=>"number"==typeof t&&t>0;const e=["red","blue","purple"];const i=["head","segment"],s=t=>"number"==typeof t&&t>=0;var o=class{constructor(t,e,i,s="black",o="white"){this.positionX=this.lastPositionX=parseInt(t),this.positionY=this.lastPositionY=parseInt(e),this.type=i,this.text=i,this.color=s,this.textColor=o,this.validate()}get isHead(){return"head"==this.type}get positions(){return{x:this.positionX,y:this.positionY}}get positionsArray(){return[this.positionX,this.positionY]}samePositions(t){return this.positionX===t.positionX&&this.positionY===t.positionY}validate(){if(!i.includes(this.type))throw TypeError(`The provided type: '${this.type}' is not valid as a SnakeSegment`);if(!s(this.positionX))throw TypeError("The parameter `positionX` must be a positive integer number");if(!s(this.positionY))throw TypeError("The parameter `positionY` must be a positive integer number")}},n={exports:{}};const r={up:["down"],down:["up"],left:["right"],right:["left"]};class a{constructor(t){this.board=t,this.currentDirection=this.lastDirection=null,this.foods=[],this.bodySegments=[new o(0,0,"head")]}get length(){return this.bodySegments.length}get head(){return this.bodySegments[this.bodySegments.length-1]}get positionX(){return this.head.positionX}get positionY(){return this.head.positionX}get headPositions(){return this.head.positions}eatFood(t){if("object"!=typeof t)throw TypeError("Invalid food");const e=this.createSegment(this.bodySegments[0],`Segment #${this.bodySegments.length}`);this.foods.push(t),this.addSegment(e)}createSegment(t,e="",i="segment",s="black"){const n=this.calculateSegmentPositionFromReference(t,this.lastDirection);return new o(this.calculateX(n.x,this.board.maxLines),this.calculateY(n.y,this.board.maxRows),i,s,e)}calculateSegmentPositionFromReference(t,e){return{x:this.calculatePositionFromDirection(t.positionX,e,{left:1,right:-1}),y:this.calculatePositionFromDirection(t.positionY,e,{up:1,down:-1})}}calculatePositionFromDirection(t,e,i={}){return t+(i[e]||0)}segmentExists(t){return this.bodySegments.some(e=>e.samePositions(t))}addSegment(t){return this.bodySegments.unshift(t),this.bodySegments}canTurnTowardsDirection(t,e){return 1==this.length||!r[t].includes(e)}moveToDirection(t){if(!this.canTurnTowardsDirection(this.currentDirection,t))return!1;switch(t){case"up":this.moveUp();break;case"left":this.moveLeft();break;case"right":this.moveRight();break;case"down":this.moveDown()}return!0}moveLeft(){this.move(this.head.positionX-1,this.head.positionY,"left")}moveRight(){this.move(this.head.positionX+1,this.head.positionY,"right")}moveUp(){this.move(this.head.positionX,this.head.positionY-1,"up")}moveDown(){this.move(this.head.positionX,this.head.positionY+1,"down")}moveSegment(t,e,i,s){return t.lastPositionX=t.positionX,t.lastPositionY=t.positionY,t.positionX=e,t.positionY=i,t}moveHead(t,e,i){const s=this.calculateX(t,this.board.maxLines),o=this.calculateY(e,this.board.maxRows);return this.moveSegment(this.head,s,o,i)}moveBodySegmentsTowardsHead(t){const e=this.bodySegments.slice(0).reverse();e.forEach((i,s)=>{if(!i.isHead){const o=e[s-1];this.moveSegment(i,o.lastPositionX,o.lastPositionY,t)}})}move(t,e,i){this.lastDirection=this.currentDirection,this.currentDirection=i,this.moveHead(t,e,i),this.moveBodySegmentsTowardsHead(i)}calculateX(t,e){return this.calculateValidPosition(t,e)}calculateY(t,e){return this.calculateValidPosition(t,e)}calculateValidPosition(t,e,i=0){let s=t;return t<i?s=e:t>=e&&(s=i),s}}void 0!==n.exports?n.exports=a:window.Snake=a,n=n.exports;const h={up:["KeyW","ArrowUp"],left:["KeyA","ArrowLeft"],right:["KeyD","ArrowRight"],down:["KeyS","ArrowDown"]},d=Object.keys(h);var c=class{constructor(t,e=12,i=12,s=48,o=!1){this.canvasElement=t,this.updateInterval=100,this.rows=e,this.lines=i,this.tileSize=s,this.debugMode=o,this.redraw=!1,this.canMoveSnake=!0,this.setup()}resetCanvas(){const t=document.querySelector(this.canvasElement),i=t.parentElement;i&&(i.style.width=`${t.width}px`,i.style.height=`${t.height}px`,i.style.margin="0 auto"),this.canvas=new class{constructor(t,e,i,s=48,o=!1){this.board=i,this.snake=e,this.tileSize=s,this.debugMode=o,this.setupHTMLCanvas(t),this.setup()}setupHTMLCanvas(t){if(!(t instanceof HTMLCanvasElement))throw new TypeError(`The HTML5 canvas provided: "${this.canvasElement}" must be a HTMLCanvasElement`);this.canvas=t,this.context=this.canvas.getContext("2d")}setup(){this.clear(),this.setCanvasDimensions(),this.setRandomCurrentFood()}draw(){this.drawTiles(),this.drawCurrentFood(),this.drawSnake()}drawSnake(){this.snake.bodySegments.forEach((t,e)=>{this.drawObjectAtTile(t)})}drawObjectAtTile(t){const e=t.positionX*this.tileSize,i=t.positionY*this.tileSize;this.context.fillStyle=t.color,this.context.fillRect(e,i,this.tileSize,this.tileSize),this.debugMode&&t.text&&(this.context.fillStyle=t.textColor||"white",this.context.fillText(t.text,e,i+this.tileSize/2))}drawCurrentFood(){this.drawObjectAtTile(this.currentFood)}drawTiles(){for(let t=0;t<=this.board.maxRows;t++)for(let e=0;e<=this.board.maxLines;e++){const i=this.debugMode?(e+t)%2==0?"red":"green":"white";this.drawTile(t,e,i)}}drawTile(t,e,i){const s=t*this.tileSize,o=e*this.tileSize,n=e+t+t-2;this.context.fillStyle=i,this.context.fillRect(o,s,this.tileSize,this.tileSize),this.context.fillText(n,o+this.tileSize/2,s-this.tileSize/2)}clear(){this.context.clearRect(0,0,this.canvas.width,this.canvas.width)}setCanvasDimensions(){this.canvas.width=this.tileSize*this.board.maxRows,this.canvas.height=this.tileSize*this.board.maxRows}setRandomCurrentFood(){const t=this.snake.bodySegments.map(t=>t.positionsArray);this.currentFood&&t.push(this.currentFood.positionsArray);const i=this.randomPositionsWithNoObstructions(t,this.board.maxLines,this.board.maxRows),s=e[Math.floor([Math.random()*e.length])],o=`Food #${this.snake.length}`;this.currentFood=this.createFood(i[0],i[1],1==this.debugMode?"white":s,o)}createFood(t,e,i,s=""){return new class{constructor(t,e,i="green",s=""){this.positionX=t,this.positionY=e,this.color=i,this.text=s,this.textColor="black"}get positions(){return{x:this.positionX,y:this.positionY}}get positionsArray(){return[this.positionX,this.positionY]}}(t,e,i,s)}randomPositionsWithNoObstructions(t,e,i){do{var s=Math.floor(Math.random()*e),o=Math.floor(Math.random()*i)}while(t.includes([s,o]));return[s,o]}}(t,this.snake,this.board,this.tileSize,this.debugMode)}setup(){this.board=new class{constructor(e,i){if(this.rows=parseInt(e),this.lines=parseInt(i),!t(this.rows))throw new TypeError("`rows` must be a positive number greather than 0");if(!t(this.lines))throw new TypeError("`lines` must be a positive number greather than 0")}get maxRows(){return this.rows}get maxLines(){return this.lines}}(this.rows,this.lines),this.snake=new n(this.board),this.snake.currentDirection=d[Math.floor(Math.random()*d.length)],this.resetCanvas(),this.inputSetup(),this.draw()}init(){this.setup(),setInterval(this.update.bind(this),this.updateInterval)}draw(){this.canvas.draw()}autoMoveSnake(){this.moveSnake(this.snake.currentDirection)}update(){this.autoMoveSnake(),this.redraw&&(this.draw(),this.redraw=!1)}moveSnake(t){this.canMoveSnake&&(this.canMoveSnake=!1,this.redraw=!0,this.snake.moveToDirection(t)&&(this.detectBodySegmentColision(),this.detectFoodColision()),this.canMoveSnake=!0)}detectBodySegmentColision(){const{snake:t}=this;t.bodySegments.forEach(e=>{!e.isHead&&t.head.samePositions(e)&&this.gameOver()})}gameOver(t=!0){console.log("%c You just lose","color: red; font-weight: bold; background: black; padding: 10px;"),this.setup()}detectFoodColision(){const{snake:t,currentFood:e}=this.canvas;t.head.samePositions(e)&&(t.eatFood(e),this.spawnRandomFood(),this.draw())}spawnRandomFood(){this.canvas.setRandomCurrentFood()}inputSetup(){document.addEventListener("keyup",t=>{if(1==this.redraw)return;const e=this.detectKeyFromCode(t.code);e.direction&&(this.moveSnake(e.direction),this.redraw=!0)})}detectKeyFromCode(t,e=h){var i={direction:null,key:null};return Object.keys(e).forEach(s=>{e[s].includes(t)&&null==i.direction&&(i={direction:s,key:t})}),i}};(()=>{"use strict";console.log("Game is available through window.Game."),window.Game=c})()}();